# -*- coding: utf-8 -*-
"""ImageAssessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFgPUAdDC98uTHJ4dRqP4H4lYJmUaDjQ
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

img=cv2.imread('/content/sample_data/jf.jpg')

if img is None:
  print("No image avilable")
  pass
else:
  cv2_imshow(img)

dimensions=img.shape

print('hight=',dimensions[0])
print('width=',dimensions[1])
print('channels=',dimensions[2])

gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)
dimensions_gray=gray_image.shape
print(dimensions_gray)
print('hight=',dimensions_gray[0])
print('width=',dimensions_gray[1])
#print('channels=',dimensions_gray[2])

from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

# Obtain the dimensions of the image array
# using the shape method
(row, col) = gray_image.shape[0:2]

matrix = np.array(gray_image)
# Display the matrix
plt.imshow(matrix)
plt.show()

#original image representation
print('Color image in Matrix:')
img_matrix_color=np.array(img)
print(img_matrix_color)
print('Gray image in Matrix:')
img_matrix_gray=np.array(gray_image)
print(img_matrix_gray)

# Take the average of pixel values of the BGR Channels
# to convert the colored image to grayscale image
for i in range(row):
    for j in range(col):
        # Find the average of the BGR pixel values
        img[i, j] = sum(img[i, j]) * 0.93


cv2_imshow(gray_image)
cv2.waitKey(0)

# Window shown waits for any key pressing event
cv2.destroyAllWindows()

#Crop image
img=cv2.imread('/content/sample_data/jf.jpg')

dimensions=img.shape

print('hight=',dimensions[0])
print('width=',dimensions[1])
print('channels=',dimensions[2])

print("Original Image: ")
cv2_imshow(img)

crop = img[50:50, 100:100]

print("Cropped Image: ")


def crop_image(input_image_path, output_image_path, x, y, width, height):
    # Read the input image
    image = cv2.imread(input_image_path)

    # Crop the image
    cropped_image = image[y:y+height, x:x+width]

    # Save the cropped image
    cv2.imwrite(output_image_path, cropped_image)
    return cropped_image
# Example usage:
input_path = "/content/sample_data/jf.jpg"
output_path = "output_cropped_image.jpg"
x_coordinate = 50  # starting x-coordinate of the crop
y_coordinate = 50   # starting y-coordinate of the crop
crop_width = 50    # width of the cropped region
crop_height = 50   # height of the cropped region

ci=crop_image(input_path, output_path, x_coordinate, y_coordinate, crop_width, crop_height)
cv2_imshow(ci)

#In the context of color images, "image split" often refers to splitting the image into its individual color channels.
#A typical color image is composed of three channels: Red, Green, and Blue. By splitting these channels,
#you get three grayscale images representing the intensity of each color in the original image.

img1=cv2.imread('/content/sample_data/OIP.jpg')
cv2_imshow(img1)
blue_channel, green_channel, red_channel = cv2.split(img1)
print('intensity of Blue color in the original image')
cv2_imshow(blue_channel)
print('intensity of Green color in the original image')
cv2_imshow(green_channel)
print('intensity of Red color in the original image')
cv2_imshow(red_channel)

#Artithmatic Operations on an image

image1=cv2.imread('/content/sample_data/OIP1.jpg')
image2=cv2.imread('/content/sample_data/jf.jpg')

# Perform arithmetic operations
add_result = cv2.add(image1, image2)  # Addition
subtract_result = cv2.subtract(image1, image2)  # Subtraction
multiply_result = cv2.multiply(image1, image2)  # Multiplication
divide_result = cv2.divide(image1, image2)  # Division

# Display and save the results
print("Image Addition Resulr")
cv2_imshow(add_result)
print("Image Subtraction Result")
cv2_imshow(subtract_result)
print("Image Multiplication Result")
cv2_imshow(multiply_result)
print("Image Division Result")
cv2_imshow(divide_result)


# Perform logical operations
bitwise_and_result = cv2.bitwise_and(image1, image2)
bitwise_or_result = cv2.bitwise_or(image1, image2)
bitwise_not_result = cv2.bitwise_not(image1)
bitwise_xor_result = cv2.bitwise_xor(image1, image2)

# Display and save the results
print("Image AND Resulr")
cv2_imshow(bitwise_and_result)
print("Image OR Result")
cv2_imshow(bitwise_or_result)
print("Image NOT Result")
cv2_imshow(bitwise_not_result)
print("Image XOR Result")
cv2_imshow(bitwise_xor_result)